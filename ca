#include <stdio.h>
#include <stdlib.h>

struct Process {
    int id;
    int priority;
    int burst_time;
    int arrival_time;
    int waiting_time;
    int turnaround_time;
};

void swap(struct Process *p1, struct Process *p2) {
    struct Process temp = *p1;
    *p1 = *p2;
    *p2 = temp;
}

int main() {
    int n, i, j;
    int context_switch_time = 2;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process *processes = (struct Process *)malloc(n * sizeof(struct Process));

    for (i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter Priority, Burst Time, and Arrival Time for Process %d: ", processes[i].id);
        scanf("%d %d %d", &processes[i].priority, &processes[i].burst_time, &processes[i].arrival_time);
        processes[i].waiting_time = 0;
        processes[i].turnaround_time = 0;
    }

    for (i = 0; i < n; i++) {
        for (j = i + 1; j < n; j++) {
            if (processes[i].priority > processes[j].priority) {
                swap(&processes[i], &processes[j]);
            }
        }
    }

    int current_time = 0;

    for (i = 0; i < n; i++) {
        if (current_time < processes[i].arrival_time) {
            current_time = processes[i].arrival_time;
        }

        processes[i].waiting_time = current_time - processes[i].arrival_time;
        current_time += processes[i].burst_time + context_switch_time;
        processes[i].turnaround_time = processes[i].waiting_time + processes[i].burst_time;
        for (j = i + 1; j < n; j++) {
            if (current_time - processes[j].arrival_time >= 2) {
                processes[j].priority += (current_time - processes[j].arrival_time) / 2;
            }
        }
    }

    printf("Process\tPriority\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time\n");
    for (i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].priority, processes[i].burst_time, processes[i].arrival_time, processes[i].waiting_time, processes[i].turnaround_time);
    }

    free(processes);
    return 0;
}
